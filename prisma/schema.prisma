// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum onboardingStatus {
  NEW
  NOTNEW
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  adresse       String?
  telephone     String?
  about         String?          @db.Text
  fonction      String?
  disponibilite String?
  page          String?
  isNew         onboardingStatus @default(NEW)
  accounts      Account[]
  sessions      Session[]
  Portfolio     Portfolio[]
  Competence    Competence[]
  langage       langage[]
  Profil        Profil?
}

model Tag {
  id        String      @id @default(cuid())
  name      String
  Categorie Categorie[]
}

model Profil {
  id             String  @id @default(cuid())
  name           String
  email          String
  website        String?
  facebook       String?
  instagram      String?
  twitter        String?
  github         String?
  views          Int     @default(0)
  youtube        String?
  linkedin       String?
  travailencours String?
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])
}

model Categorie {
  id   String @id @default(cuid())
  name String
  Tag  Tag[]
}

model Portfolio {
  id          String  @id @default(cuid())
  title       String?
  description String? @db.Text
  image       String?
  url         String?
  github      String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Competence {
  id     String  @id @default(cuid())
  name   String
  niveau String?
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model langage {
  id     String @id @default(cuid())
  name   String
  niveau String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
